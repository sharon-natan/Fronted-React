<?xml version="1.0"?>
<testsuite name="PhantomJS 2.1.1 (Mac OS X 0.0.0)" package="" timestamp="2016-07-07T20:33:26" id="0" hostname="Jasons-MacBook-Pro.local" tests="195" errors="0" failures="0" time="0.174">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (Macintosh; Intel Mac OS X) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1"/>
  </properties>
  <testcase name=" Renders li child components" time="0.014" classname="undefined"/>
  <testcase name="&lt;Alert /> Has type of warning" time="0.003" classname="&lt;Alert />"/>
  <testcase name="&lt;Alert /> Has type of info" time="0.001" classname="&lt;Alert />"/>
  <testcase name="&lt;Alert /> Has type of danger" time="0" classname="&lt;Alert />"/>
  <testcase name="&lt;Alert /> Has type of remove" time="0" classname="&lt;Alert />"/>
  <testcase name="&lt;Alert /> Has a close button" time="0" classname="&lt;Alert />"/>
  <testcase name="&lt;Alert /> Is dismissible" time="0" classname="&lt;Alert />"/>
  <testcase name="&lt;Alert /> Has an onClose change" time="0.002" classname="&lt;Alert />"/>
  <testcase name="&lt;Alert /> Should throw proptype error with invalid type property" time="0.001" classname="&lt;Alert />"/>
  <testcase name="&lt;Alert /> Has default props Has type of success" time="0" classname="&lt;Alert />"/>
  <testcase name="&lt;Breadcrumb /> Has default classes" time="0" classname="&lt;Breadcrumb />"/>
  <testcase name="&lt;Breadcrumb /> className is being rendered" time="0" classname="&lt;Breadcrumb />"/>
  <testcase name="&lt;Button /> Icon renders string" time="0.004" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Custom icon is rendered" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Should be a disabled button" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Button should not be disabled" time="0.001" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Button should not be disabled by default" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Button size should be extra small" time="0.001" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Button size should be small" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Button size should be mini medium" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Button size should be medium" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Button size should be extra medium" time="0.001" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Button size should be large" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Should throw proptype error with invalid size property" time="0.001" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Should be clickable" time="0.001" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Without type property Has default class" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Without type property Should not have an icon" time="0.001" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Primary Should have primary class" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Danger Should have danger class" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Danger Should have a minus icon" time="0.001" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Warning Should have warning class" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Warning Should have a exclamation circle icon" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Warning Should have a default text of Warning" time="0.001" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Info Should have info class" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Info Should have an info circle icon" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Info Should have a default text of Info" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Success Should have success class" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Success Should have a check icon" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Success Should have a default text of Success" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Add Should have success class" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Add Should have a check icon" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Add Should have a default text of add" time="0.001" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Remove Should have remove class" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Remove Should have a minus icon" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Remove Should have a default text of Remove" time="0.001" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Default Should have default class" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Default Should have no icon" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Button /> Default Should have a default text of Default" time="0" classname="&lt;Button />"/>
  <testcase name="&lt;Input/> Has default props" time="0.011" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Is a text type" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Has autofocus" time="0" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Is disabled" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Renders name" time="0.002" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Has label" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> ClassName is rendered" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> is not rounded" time="0" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> is rounded" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Helplabel is rendered" time="0" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Has placeholder" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> It has feedback icon" time="0" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> It has a type of checkbox" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Checkbox renders green/success check" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Checkbox renders yellow/warning check" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Checkbox sends checked value onClick" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Checkbox renders red/error check" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Checkbox renders grey/no validation check" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Checkbox is disabled" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> It has a type of checkbox" time="0" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> It has a type of radio" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> It has a type of radio disabled" time="0" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Radio button sends value onClick" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Is addonLeft rendering text" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Is addonRight rendering text" time="0.003" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Is addonLeft rendering an element" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Is addonRight rendering an element" time="0" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Shows success state" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Shows success state without icon" time="0" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Shows fail state" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Shows warning state" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Shows addon Right" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Shows addon Left" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Has an id/key" time="0" classname="&lt;Input/>">
    <skipped/>
  </testcase>
  <testcase name="&lt;Input/> onValidate is called" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> onKeyDown is called" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> It has a value of number" time="0" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Has a value of string" time="0" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> Has a value of true" time="0.001" classname="&lt;Input/>"/>
  <testcase name="&lt;Input/> onValidate is called when value is changed" time="0" classname="&lt;Input/>"/>
  <testcase name="&lt;Modal/> Should have success class" time="0.004" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Should have danger class" time="0" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Should have info class" time="0" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Should have warning class" time="0" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal size should be extra small" time="0.001" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal size should be extra small" time="0.001" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal size should be small" time="0.001" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal size should be small" time="0.001" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal size should be medium" time="0" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal size should be medium" time="0.001" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal size should be large" time="0" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal size should be large" time="0.001" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal has an icon" time="0.001" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal should have title" time="0.001" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal does not have a title" time="0" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal has a className" time="0.001" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal should align right" time="0" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal should align center" time="0.001" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal isOpen is true" time="0" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Modal isOpen is false" time="0.001" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Has an onClose change" time="0.001" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> Should throw proptype error with invalid type property" time="0" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> With default properties Should have a size of medium" time="0" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> With default properties Should have a type of success" time="0" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> With default properties isOpen is false" time="0.001" classname="&lt;Modal/>"/>
  <testcase name="&lt;Modal/> With default properties Modal does not have an icon" time="0" classname="&lt;Modal/>"/>
  <testcase name="&lt;Notifications/> Has default props" time="0" classname="&lt;Notifications/>">
    <skipped/>
  </testcase>
  <testcase name="&lt;Notifications/> Has a position" time="0" classname="&lt;Notifications/>">
    <skipped/>
  </testcase>
  <testcase name="&lt;Notifications/> Newest are on top" time="0" classname="&lt;Notifications/>">
    <skipped/>
  </testcase>
  <testcase name="&lt;Notifications/> Newest are not on top" time="0" classname="&lt;Notifications/>">
    <skipped/>
  </testcase>
  <testcase name="&lt;Notifications/> Max opened is rendered" time="0" classname="&lt;Notifications/>">
    <skipped/>
  </testcase>
  <testcase name="&lt;Notifications/> Prevent duplicates" time="0" classname="&lt;Notifications/>">
    <skipped/>
  </testcase>
  <testcase name="&lt;Notifications/> Do not prevent duplicates" time="0" classname="&lt;Notifications/>">
    <skipped/>
  </testcase>
  <testcase name="&lt;Notifications/> Are notifications rendering" time="0" classname="&lt;Notifications/>">
    <skipped/>
  </testcase>
  <testcase name="&lt;Page/> Page has title" time="0.011" classname="&lt;Page/>"/>
  <testcase name="&lt;Page/> Page does not have title" time="0.002" classname="&lt;Page/>"/>
  <testcase name="&lt;Page/> Title text is being rendered" time="0.001" classname="&lt;Page/>"/>
  <testcase name="&lt;Page/> Action bar renders text" time="0.002" classname="&lt;Page/>"/>
  <testcase name="&lt;Page/> Action bar renders elements" time="0.001" classname="&lt;Page/>"/>
  <testcase name="&lt;Page/> Renders children" time="0.001" classname="&lt;Page/>"/>
  <testcase name="&lt;Panel/> Panel is extra-small" time="0.006" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> Panel is extra-small" time="0.001" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> Panel is small" time="0" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> Panel is small" time="0.001" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> Panel is medium" time="0" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> Panel is medium" time="0.001" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> Panel is large" time="0" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> Panel is large" time="0.001" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> Panel is auto sized" time="0" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> Panel is auto sized" time="0" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> Panel has scroll feature" time="0.001" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> Panel does not have scroll feature" time="0" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> Panel has className" time="0" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> Panel has title" time="0.001" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> Panel does not have title" time="0.001" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> With default properties Should have a default size of auto" time="0" classname="&lt;Panel/>"/>
  <testcase name="&lt;Panel/> With default properties Should not have scroll" time="0" classname="&lt;Panel/>"/>
  <testcase name="&lt;ProgressBar/> Should have a default class of primary without type property" time="0.008" classname="&lt;ProgressBar/>"/>
  <testcase name="&lt;ProgressBar/> Should have a class of success" time="0.001" classname="&lt;ProgressBar/>"/>
  <testcase name="&lt;ProgressBar/> Should have a class of warning" time="0" classname="&lt;ProgressBar/>"/>
  <testcase name="&lt;ProgressBar/> Should have a class of danger" time="0" classname="&lt;ProgressBar/>"/>
  <testcase name="&lt;ProgressBar/> By default should not be animated" time="0" classname="&lt;ProgressBar/>"/>
  <testcase name="&lt;ProgressBar/> Should not display a label" time="0.002" classname="&lt;ProgressBar/>"/>
  <testcase name="&lt;ProgressBar/> Should have a label when label is not empty" time="0.001" classname="&lt;ProgressBar/>"/>
  <testcase name="&lt;ProgressBar/> Should be striped" time="0" classname="&lt;ProgressBar/>"/>
  <testcase name="&lt;ProgressBar/> Should not be striped" time="0" classname="&lt;ProgressBar/>"/>
  <testcase name="&lt;ProgressBar/> Should throw proptype error with invalid type property" time="0" classname="&lt;ProgressBar/>"/>
  <testcase name="&lt;Switch/> offLabel is OFF by default" time="0.008" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> onLabel renders text" time="0" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> offLabel is OFF by default" time="0" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> offLabel renders text" time="0" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> Switch is primary color" time="0" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> Switch is warning color " time="0.001" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> Switch is success color" time="0" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> Switch is remove color " time="0" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> Switch is info color" time="0.001" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> Switch has className" time="0" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> Switch is on" time="0" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> Switch is off" time="0.001" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> Has an onClick change" time="0.003" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> With default properties Should have a primary color" time="0" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> With default properties Is ON by default" time="0" classname="&lt;Switch/>"/>
  <testcase name="&lt;Switch/> With default properties onLabel is ON by default" time="0" classname="&lt;Switch/>"/>
  <testcase name="&lt;Table/> Table should have hover class" time="0.006" classname="&lt;Table/>"/>
  <testcase name="&lt;Table/> Table should not have hover class" time="0" classname="&lt;Table/>"/>
  <testcase name="&lt;Table/> Table should have a border" time="0.001" classname="&lt;Table/>"/>
  <testcase name="&lt;Table/> Table does not have a border" time="0" classname="&lt;Table/>"/>
  <testcase name="&lt;Table/> Table is condensed" time="0.001" classname="&lt;Table/>"/>
  <testcase name="&lt;Table/> Table is not condensed" time="0" classname="&lt;Table/>"/>
  <testcase name="&lt;Table/> Table is striped" time="0" classname="&lt;Table/>"/>
  <testcase name="&lt;Table/> Table is not striped" time="0" classname="&lt;Table/>"/>
  <testcase name="&lt;Table/> Table is responsive" time="0.001" classname="&lt;Table/>"/>
  <testcase name="&lt;Table/> Table is not responsive" time="0" classname="&lt;Table/>"/>
  <testcase name="&lt;Table/> Default table properties is responsive" time="0" classname="&lt;Table/>"/>
  <testcase name="&lt;Table/> Default table properties Has the hover effect" time="0" classname="&lt;Table/>"/>
  <testcase name="&lt;Table/> Default table properties Is not striped" time="0" classname="&lt;Table/>"/>
  <testcase name="&lt;Table/> Default table properties Is not condensed" time="0" classname="&lt;Table/>"/>
  <testcase name="&lt;Table/> Default table properties Does not have a border" time="0" classname="&lt;Table/>"/>
  <testcase name="&lt;Textarea/> Has a name" time="0.009" classname="&lt;Textarea/>"/>
  <testcase name="&lt;Textarea/> Has a label" time="0.002" classname="&lt;Textarea/>"/>
  <testcase name="&lt;Textarea/> Has a className" time="0.001" classname="&lt;Textarea/>"/>
  <testcase name="&lt;Textarea/> Has a placeHolder" time="0" classname="&lt;Textarea/>"/>
  <testcase name="&lt;Textarea/> Is disabled" time="0.001" classname="&lt;Textarea/>"/>
  <testcase name="&lt;Textarea/> Is not disabled" time="0" classname="&lt;Textarea/>"/>
  <testcase name="&lt;Textarea/> Value renders elements" time="0.001" classname="&lt;Textarea/>"/>
  <testcase name="&lt;Textarea/> Value renders text" time="0" classname="&lt;Textarea/>"/>
  <testcase name="&lt;Textarea/> onChange is called when value is changed" time="0.001" classname="&lt;Textarea/>"/>
  <system-out>
    <![CDATA[
]]>
  </system-out>
  <system-err/>
</testsuite>